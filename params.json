{"body":"### Summary\r\nThis page contains information on how to setup and install an Arduino thermo-server, a project I completed for a friend who wanted to automate the water pump attached to his masonry heater.  Most of the documentation is for his reference, but there is probably still a good amount of information here to take away if you are considering or starting a similar project.\r\n\r\n### Software\r\n* The thermo-server sketch which you can download via one of the links in the right column.\r\n* Adafruit's [MAX31855 Arduino library](https://github.com/adafruit/Adafruit-MAX31855-library)\r\n* Dashboard which is included with the thermo-server sketch.\r\n\r\n### Hardware\r\n* 4 Adafruit [MAX31855 Arduino boards](http://adafruit.com/products/269) assembled\r\n* 4 [Type-K Thermocouples](http://adafruit.com/products/270)\r\n* [Arduino Mega 2560](https://www.adafruit.com/products/191)\r\n* [Arduino Ethernet Shield R3](https://www.adafruit.com/products/201)\r\n* [Powerswitch Tail 2](https://www.adafruit.com/products/268)\r\n* [Passive PoE Injector Cable Set](https://www.adafruit.com/products/435)\r\n* Breadboard and wires\r\n\r\n### Development Environment\r\nIn order to build the sketch and load it onto the Arduino you will have to download and install the [Arduino IDE](http://arduino.cc/hu/Main/Software).  Once downloaded follow the setup steps: \r\n* [Windows](http://arduino.cc/en/Guide/Windows)\r\n* [Mac OS](http://arduino.cc/en/Guide/MacOSX)\r\n* [Linux](http://www.arduino.cc/playground/Learning/Linux)\r\n\r\n\r\nAfter you have the IDE installed, then install the MAX31855 library.  More information about installing Arduino libraries can be found at the bottom of this [library page](http://www.ladyada.net/library/arduino/libraries.html).\r\n\r\n### Build Sketch\r\nOpen the thermo-server sketch which you have downloaded.  Connect the Arduino Mega to your computer with a USB cable.  Hit the Upload button in the IDE to compile and upload the sketch to the Arduino.  \r\n\r\n\r\n####Problems?  \r\n* Did you select the correct serial port under Tools->Serial Port?\r\n* Do you have the correct board selected under Tools->Board->Arduino Mega 2560 or Mega ADK?  \r\n\r\n\r\nOnce the sketch is successfully uploaded then unplug the board, add the Ethernet shield, and finally plug in an Ethernet cable (the other end being connected somewhere like your router).  \r\n\r\nPower up your Arduino either via USB or a power cable and hunt down the Arduino's IP via your router's web interface, fancy command line fun, or a brute force search in your browser address bar.  With the address try hitting the stats page (if your IP was 192.168.1.5 it would be 192.168.1.5/stats) and you should see a simple uptime field.\r\n\r\n### Wiring\r\nNothing fancy going on here.  The four thermocouple boards are sharing power, ground, clock, and data lines; although, each chip has its own chip select line.  Notice each thermocouple has a 0.1 uF capacitor across it as well.  The capacitor's purpose is to reduce noise and without them the readings are indeed noisy.  If you are using the sketch without modifications, then note the defines at the top where the pins needed for talking to the MAX boards, temperature sensor, and Powertail are defined:\r\n\r\n```\r\n/* this is how often we will query the thermos for readings */\r\n#define READING_INTERVAL 1000\r\n\r\n/* this is how often we will check if we need to change the state of the pump */\r\n#define READING_PUMP_INTERVAL 60000\r\n\r\n/* chip select pins used for thermos */\r\n#define CS1 20\r\n#define CS2 21\r\n#define CS3 22\r\n#define CS4 24\r\n\r\n/* common clock and data pins for thermos */\r\n#define DO  3\r\n#define CLK 5\r\n\r\n/* temperature threshold for the pump in farenheit */\r\n#define PUMP_THRESHOLD 180\r\n\r\n/* pin that controls the pump switch */\r\n#define PUMP_CTRL 30\r\n```\r\n\r\n### Dashboard\r\nIn the repository under the dash directory lives a little AngularJS app that can pull data from the Arduino web-server.  The dash is good for debugging, displays a graph of the readings, general server state, and can issue pump commands.  Note, the dash is all client-side so the temperature data it pulls is not persistent.  You'll want to set up a data server elsewhere and if you are so inclined reconfigure the dash to point to there at least for the temperature readings.\r\n\r\n\r\nIncluded within the dash directory is also a sinatra app that I used while building and testing.  You could use this or your web-server of choice.  Note, that the dash.html file must be served and accessing the file in the browser via the file system will not work.\r\n\r\n\r\n### Extra\r\nHere is a pic of the three MAX boards I burned while working on this project:\r\n<img src=\"https://raw.github.com/dullahan-soft/thermo-server/master/images/fried.jpg\" alt=\"fried\r\n size=\"300x300\">\r\n\r\n### Authors and Contributors\r\nChris Cacciatore (@cacciatc)\r\n\r\n### Support or Contact\r\nchris.cacciatore@dullahansoft.com","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Arduino Thermo-server","tagline":"A project for automating a water pump and monitoring a masonry heater.","google":"UA-24158768-9"}